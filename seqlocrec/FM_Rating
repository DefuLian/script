#!/usr/bin/evn python

import numpy as np
from itertools import groupby, chain
#from fastFM import als
from numpy import random
from collections import defaultdict
import time
import scipy.sparse as sp
import heapq

def readFeat(featFiles):
    entity = {}
    start_feat_id = 0
    count = 0
    for featFile in featFiles:
        max_feat_id = -1
        for line in open(featFile):
            count += 1
            raw_data = line.strip().split('\t')
            entity_id, feat_id, weight = int(raw_data[0]), int(raw_data[1]), float(raw_data[2])
            if feat_id > max_feat_id:
                max_feat_id = feat_id
            if entity_id not in entity:
                entity[entity_id] = {}
            entity[entity_id][feat_id + start_feat_id] = weight
        start_feat_id += max_feat_id + 1
    print '%d features (column) with %d non-zeros entries' % (start_feat_id, count)
    return entity, start_feat_id


def getFeatureByTuple(user_item_list, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat):
    ll = []
    for row, (user_id, item_id) in enumerate(user_item_list):
        user_f = userFeat[user_id] if user_id in userFeat else {}
        item_f = itemFeat[item_id] if item_id in itemFeat else {}
        ll.append((row, user_id, 1))
        ll.extend((row, f_id + numUser, val) for f_id, val in user_f.iteritems())
        ll.append((row, item_id + numUser + numUserFeat, 1))
        ll.extend((row, f_id + numUser + numUserFeat + numItem, val) for f_id, val in item_f.iteritems())
    rows = [a for (a, b, c) in ll]
    cols = [b for (a, b, c) in ll]
    vals = [c for (a, b, c) in ll]
    x = sp.coo_matrix((vals, (rows, cols)), shape=(len(user_item_list), numUser + numUserFeat + numItem + numItemFeat))
    return sp.csc_matrix(x)


def transForm(train_data, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat):
    y = [rating for (user_id, item2rating) in train_data.iteritems() for (item_id, rating) in item2rating.iteritems()]
    user_item_list = [(user_id, item_id) for user_id, item2rating in train_data.iteritems() for item_id in item2rating.iterkeys()]
    x = getFeatureByTuple(user_item_list, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat)
    return x, np.array(y)


def readData(fileName):
    out_data = {}
    M = 0
    N = 0
    count = 0
    for line in open(fileName):
        count += 1
        att = line.strip().split('\t')
        u,i,r = int(att[0]),int(att[1]),float(att[2])
        if u > M:
            M = u
        if i > N:
            N = i
        if u not in out_data:
            out_data[u] = {}
        out_data[u][i] = r
    M += 1
    N += 1
    print 'input %d records with %d users and %d items in file: %s' % (count, M, N, fileName)
    return out_data, M, N


#def evaluation_rating(test_data, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat, fm):


def evaluation_item(train_data, test_data, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat, fm):
    top_n = 100
    all_precision, all_recall, mpr_sum = [], [], 0
    for cnt_u, (user_id, item2rating) in enumerate(test_data.iteritems()):
        print cnt_u, user_id
        exist = train_data[user_id] if user_id in train_data else {}
        hits = [0.0]*top_n
        mpr = 0
        itemSet = set(item2rating.keys())
        user_item_list = [(user_id, item_id) for item_id in range(0, numItem) if item_id not in exist ]
        if len(user_item_list) == 0:
            continue
        x = getFeatureByTuple(user_item_list, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat)
        y = fm.predict_proba(x)
        sort_items = sorted(zip(user_item_list, y), lambda e: -e[1])
        for ir, ((a, item_id), pred) in enumerate(sort_items):
            if item_id in itemSet:
                mpr += ir/(numItem - len(exist))
                for jr in range(ir, top_n):
                    hits[jr] += 1.0
        mpr /= len(itemSet)
        mpr_sum += mpr
        precision = [h/(k+1.0) for (k, h) in enumerate(hits)]
        recall = [h/len(item2rating) for (k, h) in enumerate(hits)]
        all_precision.append(precision)
        all_recall.append(recall)
    precision, recall = [0.0] * top_n, [0.0] * top_n
    for k in range(0, top_n):
        for p in all_precision:
            precision[k] += p[k] / (cnt_u+1)
        for r in all_recall:
            recall[k] += r[k] / (cnt_u+1)
    print ",".join("%.5f" % r for r in recall)
    print "\n"
    print ",".join("%.5f" % r for r in precision)
    print "\n"
    print mpr_sum / (cnt_u + 1)


def main():
    import sys
    import pickle
    from getopt import getopt
    t = time.time()
    if len(sys.argv)<3:
        print "usage: FM_Rating train.txt test.txt userFeatFiles itemFeatFiles"
        sys.exit(1)
    train_data, numUsers_train, numItem_train = readData(sys.argv[1])
    test_data, numUsers_test, numItem_test = readData(sys.argv[2])
    numUser, numItem = max(numUsers_train, numUsers_test), max(numItem_train, numItem_test)
    option, args = getopt(sys.argv[3:], 'u:i:', ['user_feat=','item_feat='])
    userFeat, numUserFeat = {}, 0
    itemFeat, numItemFeat = {}, 0
    for opt, val in option:
        if opt in ('-u', '--user_feat'):
            userFeat, numUserFeat = readFeat(val.split(','))
        if opt in ('-i', '--item_feat'):
            itemFeat, numItemFeat = readFeat(val.split(','))

    print("Data Loaded... Elapsed", time.time() - t)
    x, y = transForm(train_data, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat)
    print x[0, ]
    print y[0]
    print x[-1, ]
    print y[-1]
    print x.get_shape()

    # reg = float(sys.argv[1])
    # print reg
    #fm = als.FMClassification(rank=32, l2_reg_V=0.1)
    #fm.fit(x, y)
    print("Train finished... Elapsed", time.time() - t)
    #evaluation_item(train_data, test_data, numUser, numItem, userFeat, numUserFeat, itemFeat, numItemFeat, None)
    print "Testing finished... Elapsed", time.time() - t


if __name__== '__main__':
    # usage FM_Rating train.txt test.txt userFeatFiles itemFeatFiles
    main()
